openapi: 3.0.0
info:
  title: Todo API
  version: 1.0.0
  description: API documentation for the Todo app

servers:
  - url: http://localhost:5001
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [Pending, In Progress, Complete]
        priority:
          type: string
        dueDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: integer

    TodoInput:
      type: object
      required: [title, status]
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [Pending, In Progress, Complete]
        priority:
          type: string
        dueDate:
          type: string
          format: date

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string

    RegisterInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    LoginInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request

  /auth/login:
    post:
      tags: [Auth]
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials

  /auth/verify:
    get:
      tags: [Auth]
      summary: Verify token and get current user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: No token or invalid
        403:
          description: Invalid token

  /todos:
    get:
      tags: [Todos]
      summary: Get todos (with pagination, filter, search, sort)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: priority
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  totalPages:
                    type: integer
                  totalTodos:
                    type: integer

    post:
      tags: [Todos]
      summary: Create a new todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        201:
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        500:
          description: Server error

  /todos/{id}:
    put:
      tags: [Todos]
      summary: Update a todo
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        500:
          description: Server error

    delete:
      tags: [Todos]
      summary: Delete a todo
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Deleted
        500:
          description: Server error
